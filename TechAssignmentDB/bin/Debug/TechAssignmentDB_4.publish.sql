/*
Deployment script for TechAPIAsssignmentDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TechAPIAsssignmentDB"
:setvar DefaultFilePrefix "TechAPIAsssignmentDB"
:setvar DefaultDataPath "C:\Users\Stimm\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Stimm\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Order]...';


GO
CREATE TABLE [dbo].[Order] (
    [OrderId]     INT          IDENTITY (1, 1) NOT NULL,
    [ProductId]   VARCHAR (50) NULL,
    [TypeId]      VARCHAR (50) NULL,
    [Description] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([OrderId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Product]...';


GO
CREATE TABLE [dbo].[Product] (
    [ProductId] VARCHAR (50) NOT NULL,
    [TypeId]    VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([ProductId] ASC)
);


GO
PRINT N'Creating Table [dbo].[ProductType]...';


GO
CREATE TABLE [dbo].[ProductType] (
    [TypeId]      VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NULL,
    [Stock]       INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([TypeId] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Product_ProductType]...';


GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [FK_Product_ProductType] FOREIGN KEY ([TypeId]) REFERENCES [dbo].[ProductType] ([TypeId]);


GO
PRINT N'Creating Procedure [dbo].[spOrder_Delete]...';


GO
CREATE PROCEDURE [dbo].[spOrder_Delete]
	@OrderId varchar(60)
AS
begin
	DELETE
	from dbo.[Order]
	WHERE OrderId = @OrderId;
end
GO
PRINT N'Creating Procedure [dbo].[spOrder_Get]...';


GO
CREATE PROCEDURE [dbo].[spOrder_Get]
	@OrderId int
AS
begin
	SELECT OrderId, ProductId, TypeId, Description
	from dbo.[Order]
	WHERE OrderId = @OrderId;
end
GO
PRINT N'Creating Procedure [dbo].[spOrder_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spOrder_GetAll]
AS
begin
	SELECT OrderId, ProductId, TypeId, Description
	from dbo.[Order];
end
GO
PRINT N'Creating Procedure [dbo].[spOrder_Insert]...';


GO
CREATE PROCEDURE [dbo].[spOrder_Insert]
	@ProductId varchar(60),
	@TypeId varchar(60),
	@Description varchar(60)
AS
begin
	INSERT INTO dbo.[Order](ProductId, TypeId, Description)
	values (@ProductId, @TypeId, @Description)
end
GO
PRINT N'Creating Procedure [dbo].[spOrder_Update]...';


GO
CREATE PROCEDURE [dbo].[spOrder_Update]
	@OrderId int,
	@ProductId varchar(60),
	@TypeId varchar(60),
	@Description varchar(60)
AS
begin
	UPDATE dbo.[Order]
	set ProductId = @ProductId, TypeId = @TypeId, Description = @Description
	WHERE OrderId = @OrderId
end
GO
PRINT N'Creating Procedure [dbo].[spProduct_Delete]...';


GO
CREATE PROCEDURE [dbo].[spProduct_Delete]
	@ProductId varchar(60)
AS
begin
	DELETE
	from dbo.[Product]
	where ProductId = @ProductId;
end
GO
PRINT N'Creating Procedure [dbo].[spProduct_Get]...';


GO
CREATE PROCEDURE [dbo].[spProduct_Get]
	@ProductId varchar(60)
AS
begin
	SELECT ProductId, TypeId
	from dbo.[Product]
	where ProductId = @ProductId;
end
GO
PRINT N'Creating Procedure [dbo].[spProduct_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spProduct_GetAll]
AS
begin
	SELECT ProductId, TypeId
	from dbo.[Product]
end
GO
PRINT N'Creating Procedure [dbo].[spProduct_Insert]...';


GO
CREATE PROCEDURE [dbo].[spProduct_Insert]
	@ProductId varchar(60),
	@TypeId varchar(60)
AS
begin
	INSERT INTO dbo.[Product](ProductId, TypeId)
	values (@ProductId, @TypeId);
end
GO
PRINT N'Creating Procedure [dbo].[spProductType_Delete]...';


GO
CREATE PROCEDURE [dbo].[spProductType_Delete]
	@TypeID varchar(60)
AS
begin
	DELETE
	from dbo.[ProductType]
	where TypeId = @TypeId
end
GO
PRINT N'Creating Procedure [dbo].[spProductType_Get]...';


GO
CREATE PROCEDURE [dbo].[spProductType_Get]
	@TypeID varchar(60)
AS
begin
	SELECT TypeId, Description, Stock
	from dbo.[ProductType]
	where TypeId = @TypeId
end
GO
PRINT N'Creating Procedure [dbo].[spProductType_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spProductType_GetAll]
AS
begin
	SELECT TypeId, Description, Stock
	from dbo.[ProductType];
end
GO
PRINT N'Creating Procedure [dbo].[spProductType_Insert]...';


GO
CREATE PROCEDURE [dbo].[spProductType_Insert]
	@TypeId varchar(60),
	@Description varchar(60),
	@Stock int
AS
begin
	INSERT INTO dbo.[ProductType](TypeId, Description, Stock)
	values (@TypeId, @Description, @Stock);
end
GO
PRINT N'Creating Procedure [dbo].[spProductType_Update]...';


GO
CREATE PROCEDURE [dbo].[spProductType_Update]
	@OrderId int,
	@ProductId varchar(60),
	@TypeId varchar(60),
	@Description varchar(60)
AS
begin
	UPDATE dbo.[Order]
	set ProductId = @ProductId, TypeId = @TypeId, Description = @Description
	WHERE OrderId = @OrderId
end
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '61307295-8f6a-4321-9110-1d4fc136f350')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('61307295-8f6a-4321-9110-1d4fc136f350')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '617c3c26-fe4d-4c52-9e4e-887034cb17f7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('617c3c26-fe4d-4c52-9e4e-887034cb17f7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'da7a62bd-efd9-456a-8935-d91ec112c82a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('da7a62bd-efd9-456a-8935-d91ec112c82a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '52e3bd31-3be1-4950-8619-68b4887204fc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('52e3bd31-3be1-4950-8619-68b4887204fc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '82be485e-4c0c-400a-9fee-a76dc258dcef')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('82be485e-4c0c-400a-9fee-a76dc258dcef')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b899f85e-f494-4194-91fb-3bd45c1522a5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b899f85e-f494-4194-91fb-3bd45c1522a5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'afd83e64-6823-4773-bbfe-b5c591884d39')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('afd83e64-6823-4773-bbfe-b5c591884d39')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dc5b5849-e5ff-4a63-b449-52f6184365df')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dc5b5849-e5ff-4a63-b449-52f6184365df')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '11206c82-7a8c-4199-a43d-44a640f4cb52')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('11206c82-7a8c-4199-a43d-44a640f4cb52')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a163022b-dbd6-496d-8617-69fcca9deb3e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a163022b-dbd6-496d-8617-69fcca9deb3e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '06663213-a9eb-4377-a974-7627cefae1e8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('06663213-a9eb-4377-a974-7627cefae1e8')

GO

GO
if not exists (select 1 from dbo.[ProductType])
begin
	insert into dbo.[ProductType] (TypeId, Description, Stock)
	values (1,'Powers', 1),
	(2, 'Writers Tears', 2),
	(3, 'Bushmills', 3);

	insert into dbo.[Product](ProductId, TypeId)
	values ('a92142ad-99db-4c25-9567-180cd0e25a2b', 1),
	('ac3235a6-8aa6-4b2e-ba26-1efe9c3b36a7',2),
	('90236dad-e22c-4aec-81bf-f88e6c9cea66',2),
	('7c050368-901f-43d9-8a75-21f17f668c98',3),
	('3df89945-7b9f-4fa2-9a27-4db397880693',3),
	('ed254a23-5c1e-4dfa-b688-aa11f64dcf51',3);

end
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
