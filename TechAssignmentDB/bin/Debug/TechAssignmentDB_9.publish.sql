/*
Deployment script for TechAPIAsssignmentDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TechAPIAsssignmentDB"
:setvar DefaultFilePrefix "TechAPIAsssignmentDB"
:setvar DefaultDataPath "C:\Users\Stimm\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Stimm\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The type for column TypeId in table [dbo].[Product] is currently  VARCHAR (50) NOT NULL but is being changed to  INT NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  INT NOT NULL.
*/

IF EXISTS (select top 1 1 from [dbo].[Product])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column TypeId in table [dbo].[ProductType] is currently  VARCHAR (50) NOT NULL but is being changed to  INT NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  INT NOT NULL.
*/

IF EXISTS (select top 1 1 from [dbo].[ProductType])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping Foreign Key [dbo].[FK_Product_ProductType]...';


GO
ALTER TABLE [dbo].[Product] DROP CONSTRAINT [FK_Product_ProductType];


GO
PRINT N'Altering Table [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product] ALTER COLUMN [TypeId] INT NOT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[ProductType]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ProductType] (
    [TypeId]      INT          NOT NULL,
    [Description] VARCHAR (50) NULL,
    [Stock]       INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([TypeId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ProductType])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_ProductType] ([TypeId], [Description], [Stock])
        SELECT   [TypeId],
                 [Description],
                 [Stock]
        FROM     [dbo].[ProductType]
        ORDER BY [TypeId] ASC;
    END

DROP TABLE [dbo].[ProductType];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ProductType]', N'ProductType';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Product_ProductType]...';


GO
ALTER TABLE [dbo].[Product] WITH NOCHECK
    ADD CONSTRAINT [FK_Product_ProductType] FOREIGN KEY ([TypeId]) REFERENCES [dbo].[ProductType] ([TypeId]);


GO
PRINT N'Altering Procedure [dbo].[spProduct_Insert]...';


GO
ALTER PROCEDURE [dbo].[spProduct_Insert]
	@ProductId varchar(60),
	@TypeId int
AS
begin
	INSERT INTO dbo.[Product](ProductId, TypeId)
	values (@ProductId, @TypeId);
end
GO
PRINT N'Altering Procedure [dbo].[spProduct_Update]...';


GO
ALTER PROCEDURE [dbo].[spProduct_Update]
	@ProductId varchar(60),
	@TypeId int,
	@OrderId int
AS
begin
	UPDATE dbo.[Product]
	set OrderId = @OrderId,TypeId= @TypeId
	WHERE ProductId = @ProductId
end
GO
PRINT N'Altering Procedure [dbo].[spProductType_Delete]...';


GO
ALTER PROCEDURE [dbo].[spProductType_Delete]
	@TypeID int
AS
begin
	DELETE
	from dbo.[ProductType]
	where TypeId = @TypeId
end
GO
PRINT N'Altering Procedure [dbo].[spProductType_Get]...';


GO
ALTER PROCEDURE [dbo].[spProductType_Get]
	@TypeID int
AS
begin
	SELECT TypeId, Description, Stock
	from dbo.[ProductType]
	where TypeId = @TypeId
end
GO
PRINT N'Altering Procedure [dbo].[spProductType_Insert]...';


GO
ALTER PROCEDURE [dbo].[spProductType_Insert]
	@TypeId int,
	@Description varchar(60),
	@Stock int
AS
begin
	INSERT INTO dbo.[ProductType](TypeId, Description, Stock)
	values (@TypeId, @Description, @Stock);
end
GO
PRINT N'Altering Procedure [dbo].[spProductType_Update]...';


GO
ALTER PROCEDURE [dbo].[spProductType_Update]
	@TypeId int,
	@Description varchar(60),
	@Stock int
AS
begin
	UPDATE dbo.[ProductType]
	set Description = @Description, Stock = @Stock
	WHERE TypeId = @TypeId
end
GO
PRINT N'Altering Procedure [dbo].[spOrder_Delete]...';


GO
ALTER PROCEDURE [dbo].[spOrder_Delete]
	@OrderId int
AS
begin
	DELETE
	from dbo.[Order]
	WHERE OrderId = @OrderId;
end
GO
PRINT N'Refreshing Procedure [dbo].[spProduct_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spProduct_Delete]';


GO
PRINT N'Refreshing Procedure [dbo].[spProduct_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spProduct_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[spProduct_GetAll]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spProduct_GetAll]';


GO
PRINT N'Refreshing Procedure [dbo].[spProductType_GetAll]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spProductType_GetAll]';


GO
if not exists (select 1 from dbo.[ProductType])
begin
	insert into dbo.[ProductType] (TypeId, Description, Stock)
	values (1,'Powers', 1),
	(2, 'Writers Tears', 2),
	(3, 'Bushmills', 3);

	insert into dbo.[Product](ProductId, TypeId)
	values ('a92142ad-99db-4c25-9567-180cd0e25a2b', 1),
	('ac3235a6-8aa6-4b2e-ba26-1efe9c3b36a7',2),
	('90236dad-e22c-4aec-81bf-f88e6c9cea66',2),
	('7c050368-901f-43d9-8a75-21f17f668c98',3),
	('3df89945-7b9f-4fa2-9a27-4db397880693',3),
	('ed254a23-5c1e-4dfa-b688-aa11f64dcf51',3);

end
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Product] WITH CHECK CHECK CONSTRAINT [FK_Product_ProductType];


GO
PRINT N'Update complete.';


GO
